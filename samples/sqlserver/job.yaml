apiVersion: batch/v1
kind: Job
metadata:
  name: sqlserver-backup
spec:
  template:
    spec:
      volumes:
        - name: backup-volume
          emptyDir: {}
        - name: sqlserver-default-data
          persistentVolumeClaim:
            claimName: sqlserver-default-pvc
      containers:
      - name: 'backup-and-compress'
        image: mcr.microsoft.com/mssql/server:2022-latest
        volumeMounts:
          - name: backup-volume
            mountPath: /config
        env:
          # Extracting sensitive database information from a Kubernetes secret
          # to be used as environment variables
          - name: DB_SERVER
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: DB_SERVER
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: DB_PORT
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: DB_USER
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: DB_PASS
          - name: BACKUP_VERSION
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: BACKUP_VERSION
        command: ["/bin/bash", "-c"]
        args:
          - |
            BACKUP_DIR=/var/opt/mssql/backup/
            BACKUP_DATE="$(date +'%Y-%m-%d_%H-%M-%S')"
            BACKUP_FILE_NAME="${BACKUP_VERSION}_${BACKUP_DATE}.bak"
            echo $BACKUP_FILE_NAME > /config/BACKUP_FILE_NAME

            # Running the sqlserver backup using mysqldump
            /opt/mssql-tools/bin/sqlcmd -S ${DB_SERVER} -U SA -P ${DB_PASS} -Q "BACKUP DATABASE hangfire TO DISK = '${BACKUP_DIR}/${BACKUP_FILE_NAME}' WITH FORMAT"

            # COMPRESSING THE BACKUP
            # TO DECOMPRESS USE tar -xvzf <FILE-NAME>.tar.gz
            # cd $BACKUP_DIR
            # tar --checkpoint=1 --checkpoint-action=dot -zcvf ${BACKUP_FILE_NAME}.tar.gz $BACKUP_FILE_NAME

            # # Extracting the archive to test its contents
            # mkdir test_extraction
            # tar -xzvf ${BACKUP_FILE_NAME}.tar.gz -C test_extraction

      - name: 'upload-and-remove'
        image: d3fk/s3cmd:latest
        env:
          # Extracting object storage credentials from a Kubernetes secret
          - name: ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: ACCESS_KEY
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: SECRET_KEY
          - name: HOSTNAME
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: HOSTNAME
          - name: HOST_BUCKET
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: HOST_BUCKET
          - name: BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: BUCKET_NAME
          - name: BUCKET_DIR
            valueFrom:
              secretKeyRef:
                name: sqlserver-secret
                key: BUCKET_DIR
        volumeMounts:
          - name: sqlserver-default-data
            mountPath: /var/opt/mssql/backup/
            readOnly: true
          - name: backup-volume
            mountPath: /config
        command: ["/bin/sh", "-c"]
        args: 
          - |
            BACKUP_DIR=/var/opt/mssql/backup/
            # Extracting the backup folder name from the configuration file
            export BACKUP_FILE_NAME=$(cat /config/BACKUP_FILE_NAME)
            COMPRESSED_FILE=${BACKUP_FILE_NAME}
            BACKUP_FILE="$BACKUP_DIR/$COMPRESSED_FILE"

            # Uploading the backup to object storage using s3cmd
            # SPECIFY THE --debug for debugging
            s3cmd --access_key=$ACCESS_KEY --secret_key=$SECRET_KEY --host=$HOSTNAME --host-bucket=$HOST_BUCKET put $BACKUP_FILE s3://${BUCKET_NAME}/${BUCKET_DIR}/$COMPRESSED_FILE
            
      restartPolicy: Never
  backoffLimit: 4